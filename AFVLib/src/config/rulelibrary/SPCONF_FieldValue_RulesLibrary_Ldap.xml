<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE Rule PUBLIC "sailpoint.dtd" "../sailpoint.dtd">
<Rule name="SPCONF Field Value Rules Library" language="beanshell">

    <Source>
        <![CDATA[
        import org.apache.log4j.Logger;
        import org.apache.commons.lang.StringUtils;

        import sailpoint.api.SailPointContext;
        import sailpoint.connector.Connector;
        import sailpoint.object.*;
        import sailpoint.tools.CloseableIterator;
        import sailpoint.tools.GeneralException;

        import javax.naming.Context;
        import javax.naming.NamingEnumeration;
        import javax.naming.directory.DirContext;
        import javax.naming.directory.InitialDirContext;
        import javax.naming.directory.SearchControls;
        import javax.naming.directory.SearchResult;
        import java.util.*;

        /*
    Variables to declare in SSF
    * %%LDAP_TARGET_NAME%% = LDAP System name in IIQ
    * %%LDAP_USERS_OU%%
    * %%LDAP_TOP_LEVEL_DN%%
    * %%LDAP_CN_SOURCE_FIELD%%
    * %%LDAP_SEARCH_DN%%
    * %%LDAP_CN_FORMAT%%
    * */

            static Logger ldapFieldValueRuleLogger = Logger.getLogger("Rule.LDAP.Field.Value");

            /* Common Attributes */
            //CN - UID - UserID - commonName - Are considered the same thing
            public static Object getFV_Ldap_cn_Rule(SailPointContext context, Identity identity, String op) throws GeneralException {
                LogStart(context, identity, op, "getFV_Ldap_cn_Rule");
                String result = "";

                String expression = "%%LDAP_CN_FORMAT%%";

                String formatResult = processFormattedString(expression, identity);
                result = formatResult;

                LogEnd(context, identity, op, "getFV_Ldap_cn_Rule", result);

                return result;
            }

            public static Object getFV_Ldap_dn_Rule(SailPointContext context, Identity identity, String op) {
                String variable = "dn";

                return GetIdentityAttribute(context,identity,op,variable);
            }
            public static Object getFV_Ldap_sn_Rule(SailPointContext context, Identity identity, String op) {
                LogStart(context, identity, op, "getFV_Ldap_sn_Rule");
                String lastName = identity.getLastname();
                String result = fixNulls(lastName);
                LogEnd(context, identity, op, "getFV_Ldap_sn_Rule", result);

                return result;
            }
            public static Object getFV_Ldap_givenName_Rule(SailPointContext context, Identity identity, String op) {
                LogStart(context, identity, op, "getFV_Ldap_givenName_Rule");

                String firstName = identity.getFirstname();
                String result = fixNulls(firstName);

                LogEnd(context, identity, op, "getFV_Ldap_givenName_Rule", result);

                return result;
            }
            public static Object getFV_Ldap_password_Rule(SailPointContext context, Identity identity, String op) {
                String variable = "password";
                return GetIdentityAttribute(context,identity,op,variable);
            }
            public static Object getFV_Ldap_objectClass_Rule(SailPointContext context, Identity identity, String op) {
                String variable = "objectClass";
                String methodName = "getFV_Ldap_" + variable + "_Rule";
                LogStart(context, identity, op, methodName);

                ArrayList result = new ArrayList();
                result.add("top");
                result.add("person");
                result.add("organizationalperson");
                result.add("inetorgperson");

                LogEnd(context, identity, op, methodName, result);
                return result;
            }

            public static Object getFV_Ldap_uid_Rule(SailPointContext context, Identity identity, String op) {
                String variable = "uid";
                String methodName = "getFV_Ldap_" + variable + "_Rule";
                LogStart(context, identity, op, methodName);

                String result = getFV_Ldap_cn_Rule(context, identity, op).toString();

                LogEnd(context, identity, op, methodName, result);
                return result;
            }
            public static Object getFV_Ldap_mail_Rule(SailPointContext context, Identity identity, String op) {
                String variable = "mail";
                return GetIdentityAttribute(context,identity,op,variable);
            }
            public static Object getFV_Ldap_displayName_Rule(SailPointContext context, Identity identity, String op) {
                String variable = "displayName";
                String methodName = "getFV_Ldap_" + variable + "_Rule";
                LogStart(context, identity, op, methodName);

                //Get PreferredName if it does exist
                String result = fixNulls(identity.getStringAttribute("PreferredName"));
                if(result.isEmpty())
                    result = fixNulls(identity.getStringAttribute(variable));

                LogEnd(context, identity, op, methodName, result);
                return result;
            }
            public static Object getFV_Ldap_employeeNumber_Rule(SailPointContext context, Identity identity, String op) {
                String variable = "employeeNumber";
                return GetIdentityAttribute(context,identity,op,variable);
            }
            public static Object getFV_Ldap_telephoneNumber_Rule(SailPointContext context, Identity identity, String op) {
                String variable = "telephoneNumber";
                return GetIdentityAttribute(context,identity,op,variable);
            }
            public static Object getFV_Ldap_title_Rule(SailPointContext context, Identity identity, String op) throws GeneralException {
                String variable = "title";
                return GetIdentityAttribute(context,identity,op,variable);
            }
            public static Object getFV_Ldap_uidNumber_Rule(SailPointContext context, Identity identity, String op) throws GeneralException {
                String variable = "uidNumber";
                return GetIdentityAttribute(context,identity,op,variable);
            }
            public static Object getFV_Ldap_facsimileTelephoneNumber_Rule(SailPointContext context, Identity identity, String op) {
                String variable = "facsimileTelephoneNumber";
                return GetIdentityAttribute(context,identity,op,variable);
            }
            public static Object getFV_Ldap_gidNumber_Rule(SailPointContext context, Identity identity, String op) {
                String variable = "gidNumber";
                return GetIdentityAttribute(context,identity,op,variable);
            }
            public static Object getFV_Ldap_homeDirectory_Rule(SailPointContext context, Identity identity, String op) {
                String variable = "homeDirectory";
                return GetIdentityAttribute(context,identity,op,variable);
            }
            public static Object getFV_Ldap_mobile_Rule(SailPointContext context, Identity identity, String op) {
                String variable = "mobile";
                return GetIdentityAttribute(context,identity,op,variable);
            }

            /******************************************************************************
             UTILITIES
             ******************************************************************************/

            public static void LogStart(SailPointContext context, Identity identity, String op, String method) {
                ldapFieldValueRuleLogger.trace("Start " + method);


                ldapFieldValueRuleLogger.debug("OP = " + op);
                ldapFieldValueRuleLogger.debug("Context = " + context);
                ldapFieldValueRuleLogger.debug("identity = " + identity);
                ldapFieldValueRuleLogger.debug(identity.toXml());

            }

            public static void LogEnd(SailPointContext context, Identity identity, String op, String method, String result) {
                ldapFieldValueRuleLogger.trace("End " + method + "Return Var " + result);
                System.out.println("End " + op + " - " + method + "Return Var " + result);

        /* Improve for Debug */
                ldapFieldValueRuleLogger.debug("OP = " + op);
                ldapFieldValueRuleLogger.debug("Context = " + context);
                ldapFieldValueRuleLogger.debug("identity = " + identity);
            }

            public static String verifyNull(Object o) {
                if (o != null) {
                    return o.toString();
                } else {
                    return "";
                }
            }

            public static Object getLinkVal(SailPointContext context, Identity identity, String appName, String attrName) {
                //ldapFieldValueRuleLogger.trace("Enter getLinkVal");
                Object val = "";

                //ldapFieldValueRuleLogger.trace("appName: " + appName);
                //ldapFieldValueRuleLogger.trace("attrName: " + attrName);

                Link link = getSafeLink(context, identity, appName);

                if (link != null) {
                    val = link.getAttribute(attrName);

                    if (val != null) {
                        if (val instanceof String) {
                            val = val.toString().trim();
                        }
                    } else {
                        val = "";
                    }

                } else {
                    //ldapFieldValueRuleLogger.warn("No link found for appName: " + appName);
                }

                //ldapFieldValueRuleLogger.trace("Exit getLinkVal: " + val);
                return val;
            }

            public static Link getSafeLink(SailPointContext context, Identity identity, String appName) {
                Application app = context.getObjectByName(Application.class, appName);
                Link link = identity.getLink(app);

                if (link == null) {
                    link = new Link();
                }

                context.decache(app);

                return link;
            }

            public static Link getLinkByNativeIdentity(SailPointContext context, String application, String nativeIdentity) {
                //ldapFieldValueRuleLogger.trace("Enter getLinkByNativeIdentity");

                Link val = null;

                QueryOptions qo = new QueryOptions();
                qo.addFilter(Filter.eq("application.name", application));
                qo.addFilter(Filter.like("nativeIdentity", "CN=" + nativeIdentity, Filter.MatchMode.START));
                Iterator it = context.search(Link.class, qo);
                if (it.hasNext()) {
                    val = (Link) it.next();
                }

                //ldapFieldValueRuleLogger.trace("Exit getLinkByNativeIdentity: " + val);
                return val;
            }


            /***********************************************************************
             Check for uniqueness of AD naming attribute against a given AD application,
             verified by using a copy of the connector.
             ************************************************************************/

            public static Object GetIdentityAttribute(SailPointContext context, Identity identity,String op,String variable)
            {
                String methodName = "getFV_Ldap_" + variable + "_Rule";
                LogStart(context, identity, op, methodName);

                String result = fixNulls(identity.getStringAttribute(variable));

                LogEnd(context, identity, op, methodName, result);
                return result;
            }

            public static Boolean isUniqueLdapName(SailPointContext context, Application application, String attName, String attValue) {
                ldapFieldValueRuleLogger.trace("Entering isUniqueADName");
                Boolean unique = true;

                // Make a copy of the AD application
                Application appCopy = (Application) application.deepCopy(context);
                String appConnName = appCopy.getConnector();

                // Get the domain DN and use this as the searchDN so that we search the entire domain
                String searchDN = "%%LDAP_SEARCH_DN%%";

                List dnList = new ArrayList();
                Map setupMap = new HashMap();
                setupMap.put("iterateSearchFilter", "(" + attName + "=" + attValue + ")");
                setupMap.put("searchDN", searchDN);

                dnList.add(0, setupMap); // This takes the map we just changed and adds it back to the list in place of the map that was there.
                appCopy.setAttribute("searchDNs", dnList); // Add the list back to the app copy.
                appCopy.setAttribute("referral", "ignore");
                appCopy.setAttribute("useHasMoreElements", true);
                appCopy.setCustomizationRule(null);

                Connector appConnector = (Connector) sailpoint.connector.ConnectorFactory.getConnector(appCopy, null);
                CloseableIterator iterator = (CloseableIterator) appConnector.iterateObjects("account", null, null);

                try {
                    if (iterator != null && iterator.hasNext()) {
                        if (iterator.hasNext()) {
                            ResourceObject user = (ResourceObject) iterator.next();
                            unique = false;
                        }
                    }

                } finally {
                    if (iterator != null) iterator.close();
                }
                ldapFieldValueRuleLogger.trace("Exiting isUniqueADName");
                context.decache(appCopy);
                return unique;
            }

            public static String escapeADValues(String strIn) {
                String val = strIn;
                //ldapFieldValueRuleLogger.trace("value passed to escapeADValues=" + val);
                if (strIn.indexOf(",") > -1) {
                    val = val.replace(",", "\\,");
                }
                val = val.replaceFirst("\\s++$", "");
                //ldapFieldValueRuleLogger.trace("value returned from escapeADValues=" + val);
                return val;
            }

            public static String fixNulls(String strIn) {
                String val = strIn;
                //ldapFieldValueRuleLogger.trace("value passed to fixNulls=" + val);
                if (strIn == null) {
                    val = "";
                }
                val = val.replaceFirst("\\s++$", "");
                //ldapFieldValueRuleLogger.trace("value returned from fixNulls=" + val);
                return val;
            }

            public static String processFormattedString(String formatted, Identity identity) {

                //Format Example:firstname[1]+'.'+lastname
                //Format base: identity attribute[number of chars] + 'literal values'
                String result = "";
                String[] splitString = formatted.split("\\+");
                String identityAttributePart;
                for (String rawPart : splitString) {
                    if (rawPart.startsWith("'")) {
                        result += rawPart.substring(1,rawPart.length()-1);
                    }
                    else {
                        int count = rawPart.indexOf('[');
                        if (count > -1) {
                            int closeCount = rawPart.indexOf(']');
                            String partString = rawPart.substring(count+1,closeCount);

                            int subStringPart = Integer.parseInt(partString);
                            String attributeName = rawPart.substring(0,count);
                            String identityAttribute = identity.getStringAttribute(attributeName);
                            identityAttributePart = identityAttribute.substring(0,subStringPart);
                        }
                        else
                            identityAttributePart = identity.getStringAttribute(rawPart);

                        result += identityAttributePart;
                    }
                }
                return result;
            }

            //US Based Country names names
            public static String getCountryCode(String countryName)
            {
                String result ="";
                Map<String, Locale> localeMap;
                String[] countries = Locale.getISOCountries();
                localeMap = new HashMap<String, Locale>(countries.length);
                for (String country : countries) {
                    Locale locale = new Locale("", country);
                    localeMap.put(locale.getDisplayCountry(Locale.US).toUpperCase(), locale);
                }
                localeMap.get(countryName.toUpperCase()).getCountry();

                return result;
            }
            //ISO2 Based
            public static String getCountryName(String countryCode)
            {
                String result ="";

                Locale l = new Locale("",countryCode);
                result = l.getDisplayCountry();

                return result;
            }
            public static String processFormattedString(String formatted, Identity identity) {

                //Format Example:firstname[1]+'.'+lastname
                //Format base: identity attribute[number of chars] + 'literal values'
                String result = "";
                String[] splitString = formatted.split("\\+");
                String identityAttributePart;
                for (String rawPart : splitString) {
                    if (rawPart.startsWith("'")) {
                        result += rawPart.substring(1,rawPart.length()-1);
                    }
                    else {
                        int count = rawPart.indexOf('[');
                        if (count > -1) {
                            int closeCount = rawPart.indexOf(']');
                            String partString = rawPart.substring(count+1,closeCount);

                            int subStringPart = Integer.parseInt(partString);
                            String attributeName = rawPart.substring(0,count);
                            String identityAttribute = identity.getStringAttribute(attributeName);
                            identityAttributePart = identityAttribute.substring(0,subStringPart);
                        }
                        else
                            identityAttributePart = identity.getStringAttribute(rawPart);

                        result += identityAttributePart;
                    }
                }
                return result;
            }


        ]]>
    </Source>
</Rule>