			
		private static Object getIdentityAttribute(SailPointContext context, Identity identity, String op, String attName, String targetAttName) {
			return getIdentityAttribute(context,identity,op,attName, targetAttName, null);
		}

		private static Object getIdentityAttribute(SailPointContext context, Identity identity, String op, String attName, String targetAttName, String defaultValue) {
			String methodName = "getFV_%%TARGET_APP_NAME%%_"+attName+"_Rule ";
	        logStart(context, identity, op, methodName);
	       
	        String val = fixNulls(identity.getStringAttribute(targetAttName));
			val = (!val.isEmpty()?val:(String)defaultValue);
	        logEnd(context, identity, op, methodName, val);
	        
	        return val;
		}

	    public static String processFormattedString(String formatted, Identity identity) {
	         //Format Example:firstname[1]+'.'+lastname
	         //Format base: identity attribute[number of chars] + 'literal values'
	         String result = "";
	         String[] splitString = formatted.split("\\+");
	         String identityAttributePart;
	         for (String rawPart : splitString) {
	             if (rawPart.startsWith("'")) {
	                 result += rawPart.substring(1,rawPart.length()-1);
	             }
	             else {
	                 int count = rawPart.indexOf('[');
	                 if (count > -1) {
	                     int closeCount = rawPart.indexOf(']');
	                     String partString = rawPart.substring(count+1,closeCount);
	                     int subStringPart = Integer.parseInt(partString);
	                     String attributeName = rawPart.substring(0,count);
	                     String identityAttribute = identity.getStringAttribute(attributeName);
	                     identityAttributePart = identityAttribute.substring(0,subStringPart);
	                 }
	                 else
	                     identityAttributePart = identity.getStringAttribute(rawPart);
	                 result += identityAttributePart;
	             }
	         }
	         return result;
	     }

        public static void logStart(SailPointContext context, Identity identity, String op, String method) {
            logger.trace("Start " + method);

            logger.debug("OP = " + op);
            logger.debug("Context = " + context);
            logger.debug("identity = " + identity);

        }

		public static void logEnd(SailPointContext context, Identity identity, String op, String method, String result) {
            logger.trace("End " + method + " - Return value: " + result);
            System.out.println("End " + op + " - " + method + " - Return value:  " + result);

   			 /* Improve for Debug */
            logger.debug("OP =  " + op);
            logger.debug("Context =  " + context);
            logger.debug("Identity =  " + identity);
        }
        
        public static String fixNulls(String strIn) {
            String val = strIn;
            logger.trace("value passed to fixNulls=" + val);
            if (strIn == null) {
                val = "";
            }
            val = val.replaceFirst("\\s++$", "");
            logger.trace("value returned from fixNulls=" + val);
            return val;
         }

		public static Boolean isUniqueLdapName(SailPointContext context, Application application, String attName, String attValue) {
            logger.trace("Entering isUniqueADName");
            Boolean unique = true;

            // Make a copy of the AD application
            Application appCopy = (Application) application.deepCopy(context);
            String appConnName = appCopy.getConnector();

            // Get the domain DN and use this as the searchDN so that we search the entire domain
            String searchDN = "%%LDAP_SEARCH_DN%%";

            List dnList = new ArrayList();
            Map setupMap = new HashMap();
            setupMap.put("iterateSearchFilter", "(" + attName + "=" + attValue + ")");
            setupMap.put("searchDN", searchDN);

            dnList.add(0, setupMap); // This takes the map we just changed and adds it back to the list in place of the map that was there.
            appCopy.setAttribute("searchDNs", dnList); // Add the list back to the app copy.
            appCopy.setAttribute("referral", "ignore");
            appCopy.setAttribute("useHasMoreElements", true);
            appCopy.setCustomizationRule(null);

            Connector appConnector = (Connector) sailpoint.connector.ConnectorFactory.getConnector(appCopy, null);
            CloseableIterator iterator = (CloseableIterator) appConnector.iterateObjects("account", null, null);

            try {
                if (iterator != null && iterator.hasNext()) {
                    if (iterator.hasNext()) {
                        ResourceObject user = (ResourceObject) iterator.next();
                        unique = false;
                    }
                }

            } finally {
                if (iterator != null) iterator.close();
            }
            logger.trace("Exiting isUniqueADName");
            context.decache(appCopy);
            return unique;
        }

        public static String escapeADValues(String strIn) {
            String val = strIn;
            //logger.trace("value passed to escapeADValues=" + val);
            if (strIn.indexOf(",") > -1) {
                val = val.replace(",", "\\,");
            }
            val = val.replaceFirst("\\s++$", "");
            //logger.trace("value returned from escapeADValues=" + val);
            return val;
        }